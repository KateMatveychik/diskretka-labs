# -*- coding: utf-8 -*-
"""
–ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–ª—è –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∞–ª–≥–æ—Ä–∏—Ç–º–æ–º –§–∞–Ω–æ
–í —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –∞–ª–≥–æ—Ä–∏—Ç–º–æ–º –∏–∑ —Å–ª–∞–π–¥–æ–≤
"""

import os
import json

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–¥–æ–≤
codes_dict = {}  # –º–∞—Å—Å–∏–≤ –∫–æ–¥–æ–≤ (–∫–∞–∫ –≤ —Å–ª–∞–π–¥–∞—Ö C) (—Å–∏–º–≤–æ–ª -> –∫–æ–¥)
reverse_codes_dict = {}  # –º–∞—Å—Å–∏–≤ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ (–∫–æ–¥ -> —Å–∏–º–≤–æ–ª)
probabilities_list = []  # –º–∞—Å—Å–∏–≤ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π (–∫–∞–∫ –≤ —Å–ª–∞–π–¥–∞—Ö P)


def calculate_frequencies(text):
    """–í—ã—á–∏—Å–ª—è–µ—Ç —á–∞—Å—Ç–æ—Ç—ã —Å–∏–º–≤–æ–ª–æ–≤ –≤ —Ç–µ–∫—Å—Ç–µ (–ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –º–∞—Å—Å–∏–≤–∞ probablities_list)"""
    if not text:
        return []

    # –°—á–∏—Ç–∞–µ–º —Å–∏–º–≤–æ–ª—ã
    char_count = {}
    for char in text:
        if char in char_count:
            char_count[char] += 1
        else:
            char_count[char] = 1

    # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–±—ã–≤–∞–Ω–∏—é
    total_chars = len(text)
    frequencies = []
    for char, count in char_count.items():
        probability = count / total_chars
        frequencies.append((char, probability))

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–±—ã–≤–∞–Ω–∏—é —á–∞—Å—Ç–æ—Ç—ã (–∫–∞–∫ –≤ —Å–ª–∞–π–¥–∞—Ö)
    frequencies.sort(key=lambda x: x[1], reverse=True)
    return frequencies



def Med(b, e):

    """
        –§—É–Ω–∫—Ü–∏—è Med - –Ω–∞—Ö–æ–¥–∏—Ç –∏–Ω–¥–µ–∫—Å –º–µ–¥–∏–∞–Ω—ã
        –í—Ö–æ–¥: b - –Ω–∞—á–∞–ª–æ —á–∞—Å—Ç–∏ –º–∞—Å—Å–∏–≤–∞ probablities_list, e - –∫–æ–Ω–µ—Ü —á–∞—Å—Ç–∏ –º–∞—Å—Å–∏–≤–∞ probabilities_list
        –í—ã—Ö–æ–¥: m - –∏–Ω–¥–µ–∫—Å –º–µ–¥–∏–∞–Ω—ã
    """
    global probabilities_list

    if e <= b:
        return b

    # –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â—É—é —Å—É–º–º—É
    total = 0.0
    for i in range(b, e + 1):
        total += probabilities_list[i][1]

    # –ò—â–µ–º –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ
    left_sum = 0.0
    best_diff = float('inf')
    best_index = b

    for i in range(b, e + 1):
        left_sum += probabilities_list[i][1]
        right_sum = total - left_sum
        current_diff = abs(left_sum - right_sum)

        if current_diff < best_diff:
            best_diff = current_diff
            best_index = i
        else:
            # –ö–æ–≥–¥–∞ —Ä–∞–∑–Ω–∏—Ü–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç —É–≤–µ–ª–∏—á–∏–≤–∞—Ç—å—Å—è - –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è
            break

    return best_index


def Fano(b, e, k=0):
    """
    –†–µ–∫—É—Ä—Å–∏–≤–Ω–∞—è –ø—Ä–æ—Ü–µ–¥—É—Ä–∞ Fano –∏–∑ —Å–ª–∞–π–¥–æ–≤
    –í—Ö–æ–¥: b - –Ω–∞—á–∞–ª–æ, e - –∫–æ–Ω–µ—Ü —á–∞—Å—Ç–∏ –º–∞—Å—Å–∏–≤–∞ probabilities_list, k - –¥–ª–∏–Ω–∞ —É–∂–µ –ø–æ—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –∫–æ–¥–æ–≤
    """
    global codes_dict, probabilities_list

    if e <= b:
        return

    current_k = k + 1
    m = Med(b, e)

    # –î–æ–±–∞–≤–ª—è–µ–º –±–∏—Ç—ã –∫ –∫–æ–¥–∞–º
    for i in range(b, e + 1):
        char = probabilities_list[i][0]
        if char not in codes_dict:
            codes_dict[char] = ""

        # –£–±–µ–¥–∏–º—Å—è —á—Ç–æ –¥–ª–∏–Ω–∞ –∫–æ–¥–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç–µ–∫—É—â–µ–º—É —É—Ä–æ–≤–Ω—é
        while len(codes_dict[char]) < current_k:
            codes_dict[char] += "0"  # –≤—Ä–µ–º–µ–Ω–Ω–æ –¥–æ–±–∞–≤–ª—è–µ–º –Ω—É–ª–∏

        if i > m:
            # –ó–∞–º–µ–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –±–∏—Ç –Ω–∞ 1 –¥–ª—è –≤—Ç–æ—Ä–æ–π –≥—Ä—É–ø–ø—ã
            codes_dict[char] = codes_dict[char][:current_k - 1] + "1"
        else:
            # –ó–∞–º–µ–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –±–∏—Ç –Ω–∞ 0 –¥–ª—è –ø–µ—Ä–≤–æ–π –≥—Ä—É–ø–ø—ã
            codes_dict[char] = codes_dict[char][:current_k - 1] + "0"

    # –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–¥–≥—Ä—É–ø–ø—ã
    if m > b:
        Fano(b, m, current_k)
    if e > m:
        Fano(m + 1, e, current_k)

def encode_text(text):
    """–ö–æ–¥–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–¥—ã –§–∞–Ω–æ"""
    global codes_dict

    if not text:
        return ""

    result_bits = ""
    for char in text:
        if char in codes_dict:
            result_bits += codes_dict[char]
        else:
            print(f"–í–Ω–∏–º–∞–Ω–∏–µ: —Å–∏–º–≤–æ–ª '{char}' –Ω–µ –∏–º–µ–µ—Ç –∫–æ–¥–∞!")
            result_bits += "?"  # –∑–∞–≥–ª—É—à–∫–∞

    return result_bits


def decode_text(encoded_bits):
    """–î–µ–∫–æ–¥–∏—Ä—É–µ—Ç –±–∏—Ç–æ–≤—É—é —Å—Ç—Ä–æ–∫—É –æ–±—Ä–∞—Ç–Ω–æ –≤ —Ç–µ–∫—Å—Ç"""
    global reverse_codes_dict

    if not encoded_bits:
        return ""

    result_text = ""
    current_code = ""

    for bit in encoded_bits:
        current_code += bit
        if current_code in reverse_codes_dict:
            result_text += reverse_codes_dict[current_code]
            current_code = ""

    if current_code:
        print(f"–í–Ω–∏–º–∞–Ω–∏–µ: –æ—Å—Ç–∞–ª–∏—Å—å –Ω–µ—Ä–∞—Å–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –±–∏—Ç—ã: {current_code}")

    return result_text


def print_codes_table():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É —Å –∫–æ–¥–∞–º–∏ –§–∞–Ω–æ"""
    global codes_dict, probabilities_list

    if not codes_dict:
        print("–ö–æ–¥—ã –µ—â–µ –Ω–µ –ø–æ—Å—Ç—Ä–æ–µ–Ω—ã!")
        return

    print("\n" + "=" * 60)
    print("–¢–ê–ë–õ–ò–¶–ê –ö–û–î–û–í –§–ê–ù–û (–ø–æ –∞–ª–≥–æ—Ä–∏—Ç–º—É —Å–æ —Å–ª–∞–π–¥–æ–≤)")
    print("=" * 60)
    print("–°–∏–º–≤–æ–ª  |  –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å  | –ö–æ–¥         | –î–ª–∏–Ω–∞")
    print("-" * 60)

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–ª–∏–Ω–µ –∫–æ–¥–∞ –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –≤—ã–≤–æ–¥–∞
    codes_list = []
    for char, code in codes_dict.items():
        # –ù–∞—Ö–æ–¥–∏–º –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –¥–ª—è —ç—Ç–æ–≥–æ —Å–∏–º–≤–æ–ª–∞
        prob = 0
        for c, p in probabilities_list:
            if c == char:
                prob = p
                break
        codes_list.append((char, prob, code, len(code)))

    codes_list.sort(key=lambda x: (x[3], x[2]))

    for char, prob, code, length in codes_list:
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—ã–≤–æ–¥ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
        if char == '\n':
            char_display = "\\n"
        elif char == '\t':
            char_display = "\\t"
        elif char == '\r':
            char_display = "\\r"
        elif char == ' ':
            char_display = "space"
        else:
            char_display = char

        print(f"{char_display:6}  | {prob:10.6f}  | {code:10}  | {length}")

    print("-" * 60)


def compare_with_ascii(original_text):
    """–°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç —Å –æ–±—ã—á–Ω—ã–º ASCII-–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    if not original_text:
        return

    # ASCII –∏—Å–ø–æ–ª—å–∑—É–µ—Ç 7 –±–∏—Ç –Ω–∞ —Å–∏–º–≤–æ–ª
    ascii_bits = len(original_text) * 7
    fano_bits = len(encode_text(original_text))

    saved_bits = ascii_bits - fano_bits
    efficiency = (saved_bits / ascii_bits) * 100 if ascii_bits > 0 else 0

    print("\n–°–†–ê–í–ù–ï–ù–ò–ï –° ASCII:")
    print(f"–ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç: {len(original_text)} —Å–∏–º–≤–æ–ª–æ–≤")
    print(f"ASCII (7 –±–∏—Ç/—Å–∏–º–≤–æ–ª): {ascii_bits} –±–∏—Ç")
    print(f"–§–∞–Ω–æ: {fano_bits} –±–∏—Ç")
    print(f"–≠–∫–æ–Ω–æ–º–∏—è: {saved_bits} –±–∏—Ç ({efficiency:.1f}%)")

    return efficiency


def read_file(filename):
    """–ß–∏—Ç–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞"""
    try:
        encodings = ['utf-8', 'cp1251', 'latin-1']
        for encoding in encodings:
            try:
                with open(filename, 'r', encoding=encoding) as f:
                    return f.read()
            except UnicodeDecodeError:
                continue
        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª {filename}")
        return None
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")
        return None


def write_file(filename, content):
    """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤ —Ñ–∞–π–ª"""
    try:
        with open(filename, 'w', encoding='utf-8') as f:
            f.write(content)
        print(f"–£—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω–æ: {filename}")
        return True
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏: {e}")
        return False


def save_codes_to_file(filename):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫–æ–¥—ã –≤ —Ñ–∞–π–ª"""
    global codes_dict, probabilities_list
    try:
        data = {'codes': codes_dict, 'frequencies': probabilities_list}
        with open(filename, 'w', encoding='utf-8') as f:
            json.dump(data, f, ensure_ascii=False)
        print(f"–ö–æ–¥—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {filename}")
        return True
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–¥–æ–≤: {e}")
        return False


def load_codes_from_file(filename):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–¥—ã –∏–∑ —Ñ–∞–π–ª–∞"""
    global codes_dict, reverse_codes_dict, probabilities_list
    try:
        with open(filename, 'r', encoding='utf-8') as f:
            data = json.load(f)
        codes_dict = data['codes']
        probabilities_list = data['frequencies']
        reverse_codes_dict = {v: k for k, v in codes_dict.items()}
        print(f"–ö–æ–¥—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã: {filename}")
        return True
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–¥–æ–≤: {e}")
        return False


def get_file_path(filename, extension):
    """–°–æ–∑–¥–∞–µ—Ç –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –≤ —Ç–æ–π –∂–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏"""
    base_name = os.path.splitext(filename)[0]
    return f"{base_name}{extension}"


def show_files_in_directory():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ñ–∞–π–ª—ã –≤ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏"""
    print("\nüìÅ –§–ê–ô–õ–´ –í –¢–ï–ö–£–©–ï–ô –ü–ê–ü–ö–ï:")
    for file in os.listdir():
        if os.path.isfile(file):
            size = os.path.getsize(file)
            print(f"  {file} ({size} –±–∞–π—Ç)")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã"""
    global codes_dict, probabilities_list, reverse_codes_dict

    print("–ê–õ–ì–û–†–ò–¢–ú –§–ê–ù–û")
    print("=" * 50)

    while True:
        print("\n" + "=" * 50)
        print("–í–´–ë–ï–†–ò–¢–ï –î–ï–ô–°–¢–í–ò–ï:")
        print("1. –ó–∞–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª")
        print("2. –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª")
        print("3. –ü–æ–∫–∞–∑–∞—Ç—å —Ñ–∞–π–ª—ã –≤ –ø–∞–ø–∫–µ")
        print("4. –í—ã–π—Ç–∏")

        choice = input("–í–∞—à –≤—ã–±–æ—Ä (1-4): ").strip()

        if choice == '1':
            filename = input("–í–≤–µ–¥–∏—Ç–µ –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è: ").strip()
            text = read_file(filename)
            if not text:
                continue

            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
            codes_dict = {}
            reverse_codes_dict = {}
            probabilities_list = calculate_frequencies(text)

            print("–°—Ç—Ä–æ–∏–º –∫–æ–¥—ã –§–∞–Ω–æ...")
            Fano(0, len(probabilities_list) - 1, 0)  # –∑–∞–ø—É—Å–∫–∞–µ–º –∞–ª–≥–æ—Ä–∏—Ç–º –§–∞–Ω–æ

            print_codes_table()
            encoded = encode_text(text)

            encoded_file = get_file_path(filename, "_encoded.bin")
            codes_file = get_file_path(filename, "_codes.json")

            write_file(encoded_file, encoded)
            save_codes_to_file(codes_file)
            compare_with_ascii(text)

            print(f"\n‚úÖ –ö–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
            print(f"–°–æ–∑–¥–∞–Ω—ã —Ñ–∞–π–ª—ã: {encoded_file}, {codes_file}")

        elif choice == '2':
            bin_file = input("–í–≤–µ–¥–∏—Ç–µ –∏–º—è .bin —Ñ–∞–π–ª–∞: ").strip()
            codes_file = get_file_path(bin_file, "_codes.json")
            if not os.path.exists(codes_file):
                codes_file = input(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–≤–µ–¥–∏—Ç–µ –∏–º—è —Ñ–∞–π–ª–∞ —Å –∫–æ–¥–∞–º–∏: ").strip()

            if not load_codes_from_file(codes_file):
                continue

            encoded_text = read_file(bin_file)
            if not encoded_text:
                continue

            decoded = decode_text(encoded_text)
            output_file = get_file_path(bin_file, "_decoded.txt")

            if write_file(output_file, decoded):
                print(f"‚úÖ –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–æ {len(decoded)} —Å–∏–º–≤–æ–ª–æ–≤")

        elif choice == '3':
            show_files_in_directory()

        elif choice == '4':
            print("–í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã")
            break

        else:
            print("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")


if __name__ == "__main__":
    main()
